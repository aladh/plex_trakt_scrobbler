stages:
  - test
  - build
  - deploy

lint:
  stage: test
  image: golangci/golangci-lint:v1.37
  script:
    - golangci-lint run -v -E golint -E gofmt -E goconst -E interfacer -E gocritic -E gocognit -E gocyclo

container-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" $CI_REGISTRY_IMAGE
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker push $CI_REGISTRY_IMAGE
  only:
    - master

cloud-run:
  stage: deploy
  image: google/cloud-sdk
  services:
    - docker:dind
  variables:
    SOURCE_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    DESTINATION_IMAGE: us.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    DOCKER_HOST: 'tcp://docker:2375'
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u _json_key -p "$(cat $SERVICE_ACCOUNT)" https://us.gcr.io
    - gcloud auth activate-service-account --key-file $SERVICE_ACCOUNT
  script:
    - docker pull $SOURCE_IMAGE
    - docker tag $SOURCE_IMAGE $DESTINATION_IMAGE
    - docker push $DESTINATION_IMAGE
    - gcloud run deploy $SERVICE_NAME \
      --project $GCP_PROJECT_ID \
      --platform managed \
      --region $GCP_REGION \
      --image $DESTINATION_IMAGE \
      --set-env-vars TRAKT_CLIENT_ID=${TRAKT_CLIENT_ID},\
                     TRAKT_CLIENT_SECRET=${TRAKT_CLIENT_SECRET},\
                     TRAKT_ACCESS_TOKEN=${TRAKT_ACCESS_TOKEN},\
                     PLEX_SERVER_UUIDS=${PLEX_SERVER_UUIDS},\
                     PLEX_USERNAME=${PLEX_USERNAME}
  after_script:
    - gcloud container images delete $DESTINATION_IMAGE --force-delete-tags
  environment:
    name: production
  only:
    - master
